{"version":3,"sources":["PathfindingVisualizer/Tile/Tile.jsx","algorithms/dijkstra.js","algorithms/aStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/heart.js","App.js","serviceWorker.js","index.js"],"names":["Tile","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startTile","finishTile","visitedTilesInOrder","distance","unvisitedTiles","Tiles","tile","push","getAllTiles","length","sortTilesByDistance","closestTile","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","TileA","TileB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousTile","aStar","temp","currentRow","console","log","print","g_cost","h_cost","f_cost","x1","y1","x2","y2","open_list","closed_list","current_tile","current_index","index","splice","path","current","reverse","children","b","c","a","x","y","child","Mainloop","i","j","compareTile","open_tile","d","settingStart","settingFinish","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithNewStart","getNewGridWithNewEnd","getNewGridWithWallToggled","tilesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","TilesInShortestPathOrder","currentTile","unshift","getTilesInShortestPathOrder","animate","values","newerGrid","h","concat","heart","window","location","reload","onClick","visualizeDijkstra","visualizeAStar","visualizeHeart","refreshPage","setStart","setEnd","map","rowIdx","key","tileIdx","handleMouseDown","handleMouseEnter","handleMouseUp","createTile","slice","newTile","oldTile","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a01b9812.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Tile.css';\n\nexport default class Tile extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'tile-finish'\n      : isStart\n      ? 'tile-start'\n      : isWall\n      ? 'tile-wall'\n      : '';\n\n    return (\n      <div\n        id={`tile-${row}-${col}`}\n        className={`tile ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","export function dijkstra(grid, startTile, finishTile) {\n  const visitedTilesInOrder = [];\n  startTile.distance = 0;\n  const unvisitedTiles = getAllTiles(grid);\n  while (unvisitedTiles.length) {\n    sortTilesByDistance(unvisitedTiles);\n    const closestTile = unvisitedTiles.shift();\n    if (closestTile.isWall) continue;\n    if (closestTile.distance === Infinity) return visitedTilesInOrder;\n    closestTile.isVisited = true;\n    visitedTilesInOrder.push(closestTile);\n    if (closestTile === finishTile) return visitedTilesInOrder;\n    updateUnvisitedNeighbors(closestTile, grid);\n  }\n}\n\nfunction sortTilesByDistance(unvisitedTiles) {\n  unvisitedTiles.sort((TileA, TileB) => TileA.distance - TileB.distance);\n}\n\nfunction updateUnvisitedNeighbors(tile, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(tile, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = tile.distance + 1;\n    neighbor.previousTile = tile;\n  }\n}\n\nfunction getUnvisitedNeighbors(tile, grid) {\n  const neighbors = [];\n  const { col, row } = tile;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllTiles(grid) {\n  const Tiles = [];\n  for (const row of grid) {\n    for (const tile of row) {\n      Tiles.push(tile);\n    }\n  }\n  return Tiles;\n}\n\nexport function getTilesInShortestPathOrder(finishTile) {\n  const TilesInShortestPathOrder = [];\n  let currentTile = finishTile;\n  while (currentTile !== null) {\n    TilesInShortestPathOrder.unshift(currentTile);\n    currentTile = currentTile.previousTile;\n  }\n  return TilesInShortestPathOrder;\n}\n","export function aStar(grid, startTile, finishTile) {\r\n  print(grid);\r\n  const visitedTilesInOrder = [];\r\n  visitedTilesInOrder.push(startTile);\r\n  startTile.g_cost = startTile.h_cost = startTile.f_cost = 0;\r\n  finishTile.g_cost = finishTile.h_cost = finishTile.f_cost = 0;\r\n  let open_list = [];\r\n  let closed_list = [];\r\n  open_list.push(startTile);\r\n  while (open_list.length > 0) {\r\n    let current_tile = open_list[0];\r\n    let current_index = 0;\r\n    for (var index = 0; index < open_list.length; index++) {\r\n      if (open_list[index].f_cost < current_tile.f_cost) {\r\n        current_tile = open_list[index];\r\n        current_index = index;\r\n      }\r\n    }\r\n    open_list.splice(current_index, 1);\r\n    closed_list.push(current_tile);\r\n    if (current_tile.isFinish === true) {\r\n      let path = [];\r\n      let current = current_tile;\r\n      while (current !== null) {\r\n        path.push(current);\r\n        current = current.previousTile;\r\n      }\r\n      path = path.reverse();\r\n      return [visitedTilesInOrder, path];\r\n    }\r\n    let children = [];\r\n    let b = [0, 0, -1, 1];\r\n    let c = [-1, 1, 0, 0];\r\n    for (var a = 0; a < b.length; a++) {\r\n      let x = current_tile.row + b[a];\r\n      let y = current_tile.col + c[a];\r\n      if (x > 19 || x < 0 || y > 49 || y < 0)\r\n        continue;\r\n\r\n      if (grid[x][y].isWall === true) \r\n        continue;\r\n\r\n      let child = {\r\n        ...grid[x][y],\r\n        previousTile: current_tile,\r\n      }\r\n      children.push(child);\r\n    }\r\n    Mainloop:\r\n    for (var i = 0; i < children.length; i++) {\r\n      for (var j = 0; j < closed_list.length; j++) {  \r\n        if (compareTile(children[i], closed_list[j]) === true) \r\n          continue Mainloop;\r\n      }\r\n      children[i].g_cost = current_tile.g_cost + 1.0;\r\n      children[i].h_cost = calculateHAlt(children[i].row, children[i].col, finishTile.row, finishTile.col);\r\n      children[i].f_cost = children[i].g_cost + children[i].h_cost;\r\n\r\n      for (var open_tile in open_list) {\r\n        if (compareTile(children[i], open_tile) === true && children[i].g_cost > open_tile.g_cost) {\r\n          continue Mainloop;\r\n        } \r\n      }\r\n      open_list.push(children[i]);\r\n      visitedTilesInOrder.push(children[i]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateH(x1, y1, x2, y2) {\r\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2);\r\n}\r\n\r\nfunction calculateHAlt(x1, y1, x2, y2) {\r\n  return ((x1- x2) ** 2) + ((y1 - y2) ** 2);\r\n}\r\n\r\nfunction compareTile(a, b) {\r\n  if (a.row === b.row && a.col === b.col)\r\n    return true;\r\n  return false;\r\n}\r\n\r\nfunction print(grid) {\r\n  let temp = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      if (grid[row][col].isWall === false) {\r\n        currentRow.push(0);\r\n      } else {\r\n        currentRow.push(1);\r\n      }\r\n    }\r\n    temp.push(currentRow);\r\n  }\r\n  console.log(temp);\r\n}","import React, { Component } from 'react';\nimport Tile from './Tile/Tile';\nimport { dijkstra, getTilesInShortestPathOrder } from '../algorithms/dijkstra';\nimport { aStar } from '../algorithms/aStar'\nimport { heart } from '../algorithms/heart'\n\n\nimport './PathfindingVisualizer.css';\n\nconst START_TILE_ROW = 10;\nconst START_TILE_COL = 10;\nconst FINISH_TILE_ROW = 10;\nconst FINISH_TILE_COL = 40;\nlet a = 10;\nlet b = 10;\nlet c = 10;\nlet d = 40;\nlet settingStart = false;\nlet settingFinish = false;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    if (settingStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n      settingStart = false;\n    } else if (settingFinish) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n      settingFinish = false;\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      // console.log(\"x: \" + row + \", y: \" + col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animate(visitedTilesInOrder, tilesInShortestPathOrder) {\n    for (let i = 0; i <= visitedTilesInOrder.length; i++) {\n      if (i === visitedTilesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(tilesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const tile = visitedTilesInOrder[i];\n        document.getElementById(`tile-${tile.row}-${tile.col}`).className =\n          'tile tile-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(tilesInShortestPathOrder) {\n    for (let i = 0; i < tilesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const tile = tilesInShortestPathOrder[i];\n        document.getElementById(`tile-${tile.row}-${tile.col}`).className =\n          'tile tile-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startTile = grid[a][b];\n    const finishTile = grid[c][d];\n    const visitedTilesInOrder = dijkstra(grid, startTile, finishTile);\n    const tilesInShortestPathOrder = getTilesInShortestPathOrder(finishTile);\n    this.animate(visitedTilesInOrder, tilesInShortestPathOrder);\n  }\n\n  visualizeAStar() {\n    const { grid } = this.state;\n    const startTile = grid[a][b];\n    const finishTile = grid[c][d];\n    const values = aStar(grid, startTile, finishTile);\n    this.animate(values[0], values[1]);\n  }\n\n  visualizeHeart() {\n    const { grid } = this.state;\n    const newGrid = getNewGridWithNewStart(this.state.grid, 19, 0);\n    this.setState({ grid: newGrid});\n    const newerGrid = getNewGridWithNewEnd(this.state.grid, 19, 49);\n    this.setState({ grid: newerGrid});\n    const values = heart(grid);\n    this.animate(values[0], values[1]);\n  }\n\n  refreshPage() {\n    window.location.reload(false);\n  }\n\n  setStart() {\n    settingStart = true;\n  }\n\n  setEnd() {\n    settingFinish = true;\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <div className=\"button\">\n          <button onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algo\n          </button>\n          <div></div>\n          <button onClick={() => this.visualizeAStar()}>\n            Visualize A* search Algo\n          </button>\n          <div></div>\n          <button onClick={() => this.visualizeHeart()}>\n            Visualize ♥ Algo\n          </button>\n          <div></div>\n          <button onClick={() => this.refreshPage()}>Clear</button>\n        </div>\n        <div className=\"selector\">\n        <button onClick={() => this.setStart()}>\n            Set Start\n          </button>\n          <div></div>\n          <button onClick={() => this.setEnd()}>\n            Set End\n          </button>\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((tile, tileIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = tile;\n                  return (\n                    <Tile\n                      key={tileIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Tile>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createTile(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createTile = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_TILE_ROW && col === START_TILE_COL,\n    isFinish: row === FINISH_TILE_ROW && col === FINISH_TILE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousTile: null,\n    f_cost: 0,\n    g_cost: 0,\n    h_cost: 0,\n  };\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const tile = newGrid[row][col];\n  const newTile = {\n    ...tile,\n    isStart: true,\n  };\n  const oldTile = {\n    ...tile,\n    col: b,\n    row: a,\n    isStart: false,\n  };\n\n  newGrid[row][col] = newTile;\n  newGrid[a][b] = oldTile;\n  a = row;\n  b = col;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const tile = newGrid[row][col];\n  const newTile = {\n    ...tile,\n    isFinish: true,\n  };\n  const oldTile = {\n    ...tile,\n    col: d,\n    row: c,\n    isFinish: false,\n  };\n  newGrid[row][col] = newTile;\n  newGrid[c][d] = oldTile;\n  c = row;\n  d = col;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const tile = newGrid[row][col];\n  const newTile = {\n    ...tile,\n    isWall: !tile.isWall,\n  };\n  newGrid[row][col] = newTile;\n  return newGrid;\n};\n","export function heart(grid) {\r\n    let path = [];\r\n    let a = [grid[19][0], grid[19][1], grid[19][2], grid[19][3], grid[19][4], grid[19][5], grid[19][6], grid[19][7], grid[19][8], grid[19][9]];\r\n    let b = [grid[19][10], grid[19][11], grid[19][12], grid[19][13], grid[19][14], grid[19][15], grid[19][16], grid[19][17], grid[19][18], grid[19][19]]\r\n    let c = [grid[19][30], grid[19][31], grid[19][32], grid[19][33], grid[19][34], grid[19][35], grid[19][36], grid[19][37], grid[19][38], grid[19][39]];\r\n    let d = [grid[19][40], grid[19][41], grid[19][42], grid[19][43], grid[19][44], grid[19][45], grid[19][46], grid[19][47], grid[19][48], grid[19][49]]\r\n    let h = [grid[19][20], grid[19][21], grid[19][22], grid[19][23], grid[19][24], grid[18][23], grid[17][22], grid[16][21], grid[15][20], grid[14][19], grid[13][18], grid[12][17], grid[11][17], grid[10][17], grid[9][18], grid[8][19], grid[8][20], grid[8][21], grid[8][22], grid[9][23], grid[10][24], grid[9][25], grid[8][26], grid[8][27], grid[8][28], grid[8][29], grid[9][30], grid[10][31], grid[11][31], grid[12][31], grid[13][30], grid[14][29], grid[15][28], grid[16][27], grid[17][26], grid[18][25], grid[19][25], grid[19][26], grid[19][27], grid[19][28], grid[19][29],]\r\n    path = path.concat(a);\r\n    path = path.concat(b);\r\n    path = path.concat(h);\r\n    path = path.concat(c);\r\n    path = path.concat(d);\r\n    let inside = [grid[18][24], grid[17][23], grid[16][22], grid[15][21], grid[14][20], grid[13][19], grid[12][18], grid[11][18], grid[10][18], grid[10][19], grid[9][19], grid[9][20], grid[9][21], grid[9][22], grid[10][23], grid[11][24], grid[10][25], grid[9][26], grid[9][27], grid[9][28], grid[9][29], grid[10][30], grid[11][30], grid[12][30], grid[13][29], grid[14][28], grid[15][27], grid[16][26], grid[17][25], grid[17][24], grid[16][23], grid[15][22], grid[14][21], grid[13][20],grid[12][19],grid[11][19],grid[10][20],grid[10][21],grid[10][22],grid[11][23],grid[12][24],grid[11][25],grid[10][26],grid[10][27],grid[10][28],grid[10][29],grid[11][29],grid[12][29],grid[13][28],grid[14][27],grid[15][26],grid[16][25],grid[16][24],grid[15][23],grid[14][22],grid[13][21],grid[12][20],grid[11][20],grid[11][21],grid[11][22],grid[12][23],grid[13][24],grid[12][25],grid[11][26],grid[11][27],grid[11][28],grid[12][28],grid[13][27],grid[14][26],grid[15][25],grid[15][24],grid[14][23],grid[13][22],grid[12][21],grid[12][22],grid[13][23],grid[14][24],grid[13][25],grid[12][26],grid[12][27],grid[13][26],grid[14][25]]\r\n    return [inside, path];\r\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}